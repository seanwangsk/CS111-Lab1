This code is written by Zhiyang Wang 303991529 and Minhan Xia 204000665
Lab1a
Finished all stuff for Lab1a including subshell function. And also, for
(
  a
  b
)
it will be parsed as (a;b)

Lab1b
Finished all stuff for Lab1b. The command will be executed almost in the same way as bash. One exception is when using a inexisting file as input file or output file, in bash it will not only report error but also throw out the line number of the script. But due to the existing design of main.c, after reading the whole script, the input of execute_command is command_t, which no longer contains line number information, we could not tell line number here.

In our design, system level error such as failing to fork a new process to conduct one simple command will print an error message and skip the execution of current command, but won't stop the whole script 

Lab1c
In Lab1c, we define a data struct call command_unit. Command_unit represents a complete command which is separated by ";" or "\n". Command_unit is the least element to execute. In other words, we paralellize the execution of commands according to each command_unit.

Also, we defined file_tracker which tracks each file in the script. 

In our design, we first analyze the file dependency of each command_unit. If a command_unit is blocked, then it is added to the command queue inside of the file_tracker. If the command_unit is not blocked, then the command_unit gets executed. When the commmand_unit is executing, it mark all the files that it is needed. 

